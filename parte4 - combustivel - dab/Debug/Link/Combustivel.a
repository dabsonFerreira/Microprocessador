;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void diminuiCombustivel() {
; 0000 0009 void diminuiCombustivel() {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000A if (combustivel > 0) {
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 000B combustivel -= 1001;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 000C } else {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 000D combustivel = 28000;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 000E printf("O Sistema ficou sem combustivel, para reabastecer aperte qualquer botão!\n");
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 000F 
; 0000 0010 }
;PCODE: $00000024 VOL: 0
; 0000 0011 isConsumindoCombustivel = 0;
;PCODE: $00000025 VOL: 0
; 0000 0012 }
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;interrupt[2]void ext_int0_isr(void) {
; 0000 0015 interrupt[2]void ext_int0_isr(void) {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0016 // Place your code here
; 0000 0017 if (PINB.4 == 1) {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0018 PORTD.0 = ~PORTD.0;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0019 isConsumindoCombustivel = 1;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 001A }
; 0000 001B 
; 0000 001C if (PINB.3 == 1) {
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 001D PORTD.1 = ~PORTD.1;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 001E isConsumindoCombustivel = 1;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 001F }
; 0000 0020 
; 0000 0021 //HABILITANDO O isConsumindoCombustivel DE COMBUSTIVEL AO USAR O LIMPADOR
; 0000 0022 //if (PINB.4 || PINB.3) {
; 0000 0023 // isConsumindoCombustivel = 1;
; 0000 0024 //}
; 0000 0025 }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;interrupt[3]void ext_int1_isr(void) {
; 0000 0027 interrupt[3]void ext_int1_isr(void) {
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0028 //Place your code here
; 0000 0029 if (PINB.1 == 1) {
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 002A PORTD.4 = ~PORTD.4;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 002B isConsumindoCombustivel = 1;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 002C }
; 0000 002D 
; 0000 002E if (PINB.0 == 1) {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 002F PORTD.6 = ~PORTD.6;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0030 isConsumindoCombustivel = 1;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0031 }
; 0000 0032 
; 0000 0033 //HABILITANDO O isConsumindoCombustivel DE COMBUSTIVEL AO USAR O LIMPADOR
; 0000 0034 //if (PINB.1 || PINB.0) {
; 0000 0035 //isConsumindoCombustivel = 1;
; 0000 0036 //}
; 0000 0037 }
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;interrupt[10]void timer1_ovf_isr(void) {
; 0000 0039 interrupt[10]void timer1_ovf_isr(void) {
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 003A //HABILITANDO O isConsumindoCombustivel DE COMBUSTIVEL AO USAR O LIMPADOR
; 0000 003B //if (PINB.6 || PINB.7) {
; 0000 003C //  isConsumindoCombustivel = 1;
; 0000 003D //}
; 0000 003E 
; 0000 003F if (PINB.6 == 1) {
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0040 isConsumindoCombustivel = 1;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0041 PORTA.0 = ~PORTA.0;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0042 TCNT1H = 0x1F00 >> 8;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0043 TCNT1L = 0x1F00 & 0xFF;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0044 isMovimento0 = 0;
;PCODE: $00000087 VOL: 0
; 0000 0045 while (PORTA.0 == 1) {
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0046 PORTA.0 = 1;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0047 if (PINB.6 == 0) {
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0048 PORTA.0 = 0;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0049 isMovimento0 = 1;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 004A break;
;PCODE: $00000095 VOL: 0
; 0000 004B }
; 0000 004C }
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 004D }
; 0000 004E 
; 0000 004F if (PINB.7 == 1) {
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0050 isConsumindoCombustivel = 1;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0051 PORTA.1 = ~PORTA.1;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0052 TCNT1H = 0x1F00 >> 8;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0053 TCNT1L = 0x1F00 & 0xFF;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0054 isMovimento0 = 0;
;PCODE: $000000AD VOL: 0
; 0000 0055 while (PORTA.1 == 1) {
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0056 PORTA.1 = 1;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0057 if (PINB.7 == 0) {
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0058 PORTA.1 = 0;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0059 isMovimento0 = 1;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 005A break;
;PCODE: $000000BB VOL: 0
; 0000 005B }
; 0000 005C }
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 005D }
; 0000 005E 
; 0000 005F }
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;void main(void) {
; 0000 0062 void main(void) {
;PCODE: $000000C3 VOL: 0
; 0000 0063 // Declare your local variables here
; 0000 0064 // Input/Output Ports initialization
; 0000 0065 // Port A initialization
; 0000 0066 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0067 DDRA = (0 << DDA7) | (0 << DDA6) | (0 << DDA5) | (0 << DDA4) | (0 << DDA3) | (0 << DDA2) | (1 << DDA1) | (1 << DDA0);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0068 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
; 0000 0069 PORTA = (0 << PORTA7) | (0 << PORTA6) | (0 << PORTA5) | (0 << PORTA4) | (0 << PORTA3) | (0 << PORTA2) | (0 << PORTA1) | (0 << PORTA0);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 006A 
; 0000 006B // Port B initialization
; 0000 006C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006D DDRB = (0 << DDB7) | (0 << DDB6) | (0 << DDB5) | (0 << DDB4) | (0 << DDB3) | (0 << DDB2) | (0 << DDB1) | (0 << DDB0);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 006E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 006F PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1) | (0 << PORTB0);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0070 
; 0000 0071 // Port C initialization
; 0000 0072 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0073 DDRC = (0 << DDC7) | (0 << DDC6) | (0 << DDC5) | (0 << DDC4) | (0 << DDC3) | (0 << DDC2) | (0 << DDC1) | (0 << DDC0);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0074 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0075 PORTC = (0 << PORTC7) | (0 << PORTC6) | (1 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORTC1) | (0 << PORTC0);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0076 
; 0000 0077 // Port D initialization
; 0000 0078 // Function: Bit7=In Bit6=Out Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
; 0000 0079 DDRD = (0 << DDD7) | (1 << DDD6) | (0 << DDD5) | (1 << DDD4) | (0 << DDD3) | (0 << DDD2) | (1 << DDD1) | (1 << DDD0);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 007A // State: Bit7=T Bit6=0 Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
; 0000 007B PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORTD1) | (0 << PORTD0);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 007C 
; 0000 007D // Timer/Counter 0 initialization
; 0000 007E // Clock source: System Clock
; 0000 007F // Clock value: Timer 0 Stopped
; 0000 0080 // Mode: Normal top=0xFF
; 0000 0081 // OC0 output: Disconnected
; 0000 0082 TCCR0 = (0 << WGM00) | (0 << COM01) | (0 << COM00) | (0 << WGM01) | (0 << CS02) | (0 << CS01) | (0 << CS00);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0083 TCNT0 = 0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0084 OCR0 = 0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0085 
; 0000 0086 // Timer/Counter 1 initialization
; 0000 0087 // Clock source: System Clock
; 0000 0088 // Clock value: 14,400 kHz
; 0000 0089 // Mode: Normal top=0xFFFF
; 0000 008A // OC1A output: Toggle
; 0000 008B // OC1B output: Discon.
; 0000 008C // Noise Canceler: Off
; 0000 008D // Input Capture on Falling Edge
; 0000 008E // Timer1 Overflow Interrupt: On
; 0000 008F // Input Capture Interrupt: Off
; 0000 0090 // Compare A Match Interrupt: Off
; 0000 0091 // Compare B Match Interrupt: Off
; 0000 0092 TCCR1A = 0x00;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0093 TCCR1B = 0x05;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0094 TCNT1H = 0x38;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0095 TCNT1L = 0x3F;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0096 ICR1H = 0x00;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0097 ICR1L = 0x00;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0098 OCR1AH = 0x00;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0099 OCR1AL = 0x00;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 009A OCR1BH = 0x00;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 009B OCR1BL = 0x00;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 009C 
; 0000 009D // Timer/Counter 2 initialization
; 0000 009E // Clock source: System Clock
; 0000 009F // Clock value: Timer2 Stopped
; 0000 00A0 // Mode: Normal top=0xFF
; 0000 00A1 // OC2 output: Disconnected
; 0000 00A2 ASSR = 0 << AS2;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00A3 TCCR2 = (0 << PWM2) | (0 << COM21) | (0 << COM20) | (0 << CTC2) | (0 << CS22) | (0 << CS21) | (0 << CS20);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00A4 TCNT2 = 0x00;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00A5 OCR2 = 0x00;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00A6 
; 0000 00A7 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00A8 TIMSK = 0x04;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00A9 
; 0000 00AA // External Interrupt(s) initialization
; 0000 00AB // INT0: On
; 0000 00AC // INT0 Mode: Low level
; 0000 00AD // INT1: On
; 0000 00AE // INT1 Mode: Low level
; 0000 00AF // INT2: Off
; 0000 00B0 GICR |= (1 << INT1) | (1 << INT0) | (0 << INT2);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00B1 MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00B2 MCUCSR = (0 << ISC2);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00B3 GIFR = (1 << INTF1) | (1 << INTF0) | (0 << INTF2);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00B4 
; 0000 00B5 // USART initialization
; 0000 00B6 // USART disabled
; 0000 00B7 //UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
; 0000 00B8 
; 0000 00B9 // Analog Comparator initialization
; 0000 00BA // Analog Comparator: Off
; 0000 00BB // The Analog Comparator's positive input is
; 0000 00BC // connected to the AIN0 pin
; 0000 00BD // The Analog Comparator's negative input is
; 0000 00BE // connected to the AIN1 pin
; 0000 00BF ACSR = (1 << ACD) | (0 << ACBG) | (0 << ACO) | (0 << ACI) | (0 << ACIE) | (0 << ACIC) | (0 << ACIS1) | (0 << ACIS0);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00C0 SFIOR = (0 << ACME);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00C1 
; 0000 00C2 // ADC initialization
; 0000 00C3 // ADC disabled
; 0000 00C4 ADCSRA = (0 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (0 << ADPS1) | (0 << ADPS0);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00C5 
; 0000 00C6 // SPI initialization
; 0000 00C7 // SPI disabled
; 0000 00C8 SPCR = (0 << SPIE) | (0 << SPE) | (0 << DORD) | (0 << MSTR) | (0 << CPOL) | (0 << CPHA) | (0 << SPR1) | (0 << SPR0);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00C9 
; 0000 00CA // TWI initialization
; 0000 00CB // TWI disabled
; 0000 00CC TWCR = (0 << TWEA) | (0 << TWSTA) | (0 << TWSTO) | (0 << TWEN) | (0 << TWIE);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00CD 
; 0000 00CE // Globally enable interrupts
; 0000 00CF # asm("sei")while (1) {
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00D0 if (((PINB.4) || (PINB.3) || (PINB.1) || (PINB.0) || (PORTA.1 == 0 && isMovimento0 == 1) || (PORTA.0 == 0 && isMovimento0 == 1)) && (combustivel <= 10000)) {
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00D1 printf("Atenção! Seu combustível em nível critico!\n");
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00D2 printf("Seu combustível é de %d.\n", combustivel);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00D3 }
; 0000 00D4 
; 0000 00D5 if (((PINB.4) || (PINB.3) || (PINB.1) || (PINB.0) || (PORTA.1 == 0 && isMovimento0 == 1) || (PORTA.0 == 0 && isMovimento0 == 1)) && (combustivel >= 10000)) {
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 00D6 printf("Seu combustível é de %d.\n", combustivel);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00D7 
; 0000 00D8 isMovimento0 = 0;
;PCODE: $00000177 VOL: 0
; 0000 00D9 }
; 0000 00DA 
; 0000 00DB // CONSUMINDO COMBUSTIVEL AO USAR O LIMPADOR
; 0000 00DC if (isConsumindoCombustivel) {
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00DD diminuiCombustivel();
;PCODE: $0000017B VOL: 0
; 0000 00DE }
; 0000 00DF }
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00E0 }
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
